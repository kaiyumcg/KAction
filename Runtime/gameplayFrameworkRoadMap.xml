<TODO>
	<Ft>ReEvaluate arch(i.e. remove child-parent dependent actor execution)</Ft>
	<Ft>General purpose Level Controller?</Ft>
	<Ft>GetComponent performance improvement</Ft>
	<Ft>Node based obstacle system for platforming genre</Ft>
	<Ft>Conditional timeline(specially for animation or animation task) where clips(nodes in graph) are executed when preconditions are satisfied</Ft>
	<Ft>Weapon System</Ft>
	<Ft>Parellel Task Execution in FTaskSchedular</Ft>
	<Ft>Support root motion, IK/FootIK, avatar mask, pause/resume, rewind in FAnimator.</Ft>
	<Ft>Time rewind</Ft>
	<Ft>Sequence lib based on Task library</Ft>
	<Ft>AddForce(dir/force, mode), Spring(dir/force, mode), pop power plate like Thurst(dir/force, mode)
			Projectile(targetPoint/angle/force amount),
			Helix(axis, radius, phase, force amount, acceleration = default, deceleration = default),
			Dash(dir/targetPoint), Jelly(damping time) etc on MoveableActor</Ft>
	<Ft>Builtin Movement features to handle curvey road, volume control, strip control etc in Player Controller</Ft>
	<Ft>Robust Pickable API(Async pickable pickup)</Ft>
	<Ft>Animation Graph editor that has nodes for playing animation tasks</Ft>
	<Ft>Actor Manager's editor inspector have folded out child actors to manage execution better</Ft>
	<Ft>Group Actor where many anchor actors are executed by compute shader or unity job system</Ft>
  <Ft>FSM, HFSM, GOAP, HTN</Ft>
  <Ft>Node based blueprint and their executioner object which recieve the blueprint scriptable objects and executes them!</Ft>
  <Ft>Inventory system</Ft>
  <Ft>Dialogue system</Ft>
  <Ft>Crafting system</Ft>
  <Ft>AI behaviour tree and EQS etc like UE4</Ft>
  <Ft>In game voice dialogue tree or start game story--node based</Ft>
  <Ft>Quest system</Ft>
  <Ft>Battle system</Ft>
  <Ft>Ability tree</Ft>
  <Ft>Pickable equipment, shop</Ft>
  <Ft>Complete solution for vertex shader based animation supporting shader graph for many agent. (bake animation to texture stuffs)</Ft>

  time travel:
  //Record if actor rigidbody is kinematic or not
  //Record collider tree enable state
  //In reverse time, per actor
  //Per Transform Tree per transform set-->parent transform data, position-rotation-local scale data
  //Per collider-->disable collider
  //Set-->rigidbody position-velocity(in kinematic mode)
  //Get current TimeRevCapsule struct/class data-->call reverse()-->delete current-->Set current for next frame
  //At the end of process-->reset colliders enable state-->reset rigidbody kinematic mode
</TODO>