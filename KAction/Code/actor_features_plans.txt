Identity:
	Actors can be player or NPC or environmental static or environmental dynamic, any of the four.
	Actors can be queries against their hierarchical tags.

Visibility and Toggle:
	Show or Hide renderers
	SetActive GameObjects
	Enable or Disable gameplay components and actor component

Force Lib(Burst support or not):
	Jump with acceleration and softbody fake physics
	Helix
	Turn to another actor with ease
	Move to another actor or position with ease
	Thurst force
	Swirl watery move
	Pop(and rubbery?)
	Spring
	Summon from up/down/point(scale up tween?)
	Continuous force effects
	Shake
	Rotate move ahead for attack and back
	Check keijrio’s repo for a gameplay related project for further
	Rope hanging fake physics
	Brownian movement
	Rubber band follow movement

Internal Getter and Components
	Get Actors by tags or types or custom delegate or generic any four type
	Get components by tags or types or custom delegate
	Add Actor components(Non Actor components can not be changed once constructed in editor)
	Remove Actor components(Non Actor components can not be changed once constructed in editor)
	Destroy Actors(consider time travel and object pooling)
	Clone Actors(consider time travel and object pooling)
	Add child actor
	Remove child actor

Mini Actor Set like mass framework/DOTS/Compute Shader:

Execution:
	Easily educatable execution workflow to change execution order of actors and components.
	Custom time dilation
	Pause and Resume
	Can disable tick if not needed

Life and Death:
	Health
	Damage(Fixed/Directional etc)
	Death Async and Respawn Async

List Extension for optimized ref equal and other commonly used methods:

Data layer:
	Not like UE’s one. This is a dictionary where key is string and value is a plain class object instance 
	or certain allowed structs. This is essentially playerpref but runtime one which 
	rests only in memory and not in device storage. 
	A bunch events corresponding to that when the data changes.

