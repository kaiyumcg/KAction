Visibility and Toggle:
	Show or Hide renderers
	SetActive GameObjects
	Enable or Disable gameplay components and actor component

Internal Getter and Components
	Destroy Actors(consider time travel and object pooling)
	Clone Actors(consider time travel and object pooling)
	Parent/ReParent child actor

Mini Actor Set like mass framework/DOTS/Compute Shader:

Life and Death:
	Health
	Damage(Fixed/Directional etc)
	Death Async and Respawn Async

Data layer:
	Not like UE4's one. This is a dictionary where key is string and value is a plain class object instance 
	or certain allowed structs. This is essentially playerpref but runtime one which 
	rests only in memory and not in device storage. 
	A bunch events corresponding to that when the data changes.

//error detection--exception, warning, error etc on various places conditionally in debug mode

Update ActorLevelModule's dictionary maps and other data w.r.t. add actor components/remove actor component/child-parent relation change of actor-child actor/
																/clone-free actor prefab
//clone/free pooling of actors
//todo level module e trasient data init
//todo actor theke then ekdom first e kothay ase-upward thinking
//todo check gameplay component
//todo check actor level module
//todo check level module
//todo error check of entire framework on debug mode for early bug/error detection
//todo editor tools
//On every save, invoke editor tool's method to inject dependencies
//dictionary for mapping reactor actor things should be serialized and baked prior to avoid slow loading of levels
//editor tools for on/off conditional compilation flags
		they are: _DEBUG_MODE, Turn_Off_RefEqual_Optmization, USE_CLOUD_LOG, 


//Legacy todos
//when time reverse system is fully implemented,
//one interesting aspect is that "pause-resume-step frame backward" in game view or editor window a reality!

//Pause, Resume, Slowdown, TimeBackToNormal, 
//Due to interaction of Actors, level is changed(visually and logically)
//So we need something called "level stat" here as well.
//So for actor/level stat, should we use atomic scriptable dataset?
//What will be the workflow for actor/level stat?

/// <summary>
/// Logic about the full level in a node based workflow. i.e. when player starts to cross a bridge, 
/// a subtitled narration audio will play as player is moving. Camera also pan.
/// i.e. When the deer drinks from the river second time and player is seeing the deer, 
/// the deer now stops drinking and stair at player.
/// But we have Game level's overridden methods. Here one can extend GameLevel then do their workflow.
/// We could do script cutscene then why support timeline asset at the same time? Conveninence.
/// Thus KTaskGraph integration is probably natural once KTaskGraph is matured against node based autoring and debugging tool.
/// </summary>
//A collection of UI Pages, each page can have its own childs in a hierarchy fashion.
//Who invoke UI page, GameLevel or Actor level control? i.e. GameLevel has its own pages that only it can show/hide?

//On actor, StopMovement() will play idle animation but moving will not there.
//Sometime a level can contain randomly generated o generated actors. Should they have any stat?
//Irrespective of generation of actors in runtime, should they have persistant stats?


//Time slow, reverse etc should be handled by here
//Finding actors by player or not, tags, type etc handling
//Tools-->Level Creation-->A list of buttons denoted all the child classes of GameLevel.
//On click each, create a scene along with the class as GameLevel of the scene. And then it adds it to build setting.
//Similarly we can create a boot scene as well.

//Level progression, checkpoints, level config data(coins, exp, health etc, door unlock state) update,
//put it simple things are related to a whole level handling
//todo for that we need actor manager which handles execution of all actors
//we should have a default inspector editor UI to create default game systems whenever user adds a game manager or a button to do that!