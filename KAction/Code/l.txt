Visibility and Toggle:
	Show or Hide renderers
	SetActive GameObjects
	Enable or Disable gameplay components and actor component

Internal Getter and Components
	Destroy Actors(consider time travel and object pooling)
	Clone Actors(consider time travel and object pooling)
	Parent/ReParent child actor

Mini Actor Set like mass framework/DOTS/Compute Shader:

Life and Death:
	Health
	Damage(Fixed/Directional etc)
	Death Async and Respawn Async

Data layer:
	Not like UE4's one. This is a dictionary where key is string and value is a plain class object instance 
	or certain allowed structs. This is essentially playerpref but runtime one which 
	rests only in memory and not in device storage. 
	A bunch events corresponding to that when the data changes.

Level Prep upon build/play mode--this make sure no null list(actor, components, child actors etc)
							   --proper child/components etc

Update ActorLevelModule's dictionary maps and other data w.r.t. add actor components/remove actor component/child-parent relation change of actor-child actor/
																/clone-free actor prefab
//clone/free pooling of actors
//todo level module e trasient data init
//todo actor theke then ekdom first e kothay ase-upward thinking
//todo check gameplay component
//todo check actor level module
//todo check level module
//todo error check of entire framework on debug mode for early bug/error detection
//todo editor tools
//On every save, invoke editor tool's method to inject dependencies
//dictionary for mapping reactor actor things should be serialized and baked prior to avoid slow loading of levels
//editor tools for on/off conditional compilation flags
		they are: _DEBUG_MODE, Turn_Off_RefEqual_Optmization,  